java solution 

<<<----------------------------------------------------------------------------------------------------------------------------------->>>
class Solution {
    public void nextPermutation(int[] nums) {
        //There is algorithm to find next combination of permutation based on the Dictionary
        //1. Find the first index starting from end where array[i]<array[i+1]
       if(nums == null || nums.length <= 1) return;
      int index1 = nums.length-2;
        for(int i=nums.length-2;i>=0;)
        {
            if(nums[i]>=nums[i+1])
            {
               i--;
               index1 = i;
            }else
            {
                break;
            }
        }

        //2. Find the Second index starting from end where array[index1]>array[i]
        if(index1>=0)
        {
        int index2 = nums.length-1;
        for(int j=nums.length-1;j>=0;)
        {
            if(nums[j]<=nums[index1])
            {
            	j--;
            	index2 = j;
                //break;
            }else
            {
                break;
            }
        }

        // 3. create a swap method to swap index1 to index2;
        swap(nums,index1,index2);
        }

        // 4. reverse left items tarting from index1+1;
        reverse(nums,index1+1,nums.length-1);   
      }

    public void reverse(int[] nums,int start,int end)
    {
        while(start<end)
        {
            swap(nums,start++,end--);
        }
    }

      public void swap(int[] nums,int i,int j)
      {
          int temp = nums[i];
          nums[i] = nums[j];
          nums[j] = temp;
      }
}